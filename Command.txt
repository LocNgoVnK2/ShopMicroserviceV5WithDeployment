/* create and run all containers */
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d

/* stop and remove all running containers */
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

/* build and run all running containers */
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up --build

/* display the list of all running containers */
docker ps

/* display the list of all images */
docker images

/* display the list of all volumes */
docker volume ls

/* stop container */
docker stop << First 4 Characters of Container ID >>

/* remove container */
docker rm << First 4 Characters of Container ID >>

/* remove image */
docker rmi << First 4 Characters of Image ID >>

/* remove volume */
docker volume rm << Volume Name >>

/* stop all containers */
docker stop $(docker ps -a -q)

/* remove all containers */
docker rm -f $(docker ps -a -q)

/* remove all images */
docker rmi -f $(docker images -a -q)

/* remove all volumes */
docker volume rm $(docker volume ls -q)

/* remove all unused containers and images */
docker system prune

/* remove all unused volumnes */
docker volume prune

********************************************************************************************

/* update out dated packages */
Update-Package -ProjectName << Project Name >>

/* installing quick start for identityserver4 */
dotnet new -i identityserver4.templates
dotnet new is4ui

/* installing migration tool */
dotnet tool install --global dotnet-ef

/* create migration for identityserver4 */
dotnet ef migrations add InitialIdentityServerPersistedGrantDbMigration -c PersistedGrantDbContext -o Data/Migrations/PersistedGrantDb
dotnet ef migrations add InitialIdentityServerConfigurationDbMigration -c ConfigurationDbContext -o Data/Migrations/ConfigurationDb

/* remove migrations for identityserver4 */
dotnet ef migrations remove

/* setup the migration */
Add-Migration InitialCreate -context ConfigurationDbContext

********************************************************************************************

/* mongo bash commands */
docker exec -it shopping-mongo /bin/bash
ls
mongo
show dbs
use CatalogDb
db.createCollection('Products')
db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])
db.Products.find({}).pretty()
db.Products.remove({})
show databases
show collections

/* redis bash commands */
docker exec -it aspnetrun-redis /bin/bash
redis-cli
ping
set key value
get key

/* database scripts */
CREATE TABLE Coupon(
	ID SERIAL PRIMARY KEY         NOT NULL,
	ProductName     VARCHAR(24) NOT NULL,
	Description     TEXT,
	Amount          INT
);
INSERT INTO Coupon (ProductName, Description, Amount) VALUES ('IPhone X', 'IPhone Discount', 150);
INSERT INTO Coupon (ProductName, Description, Amount) VALUES ('Samsung 10', 'Samsung Discount', 100);
********************************************************************************************


De cac cum K8S keo ve phai deploy cac container len registry de no keo ve

docker login 

tao image tuong tu voi ten trung voi repository tren docker hub

docker tag xxxxxxx(id cua container) ngophuocloc/(repository name)

docker push ngophuocloc/(repository name) ( la image name khi duoc copy ra)




--------------------------------------
/* K8S */
apply mainfest yaml file :

    kubectl apply -f .\filename

get pod don vi nho nhat cua k8s :

    kubectl get pod 

get service cua casc deployment:

    kubectl get service

de xem chi tiet service de kiem tra ip:

	kubectl describe service (name service)

de kiem tra ip cua casc pod xem co matching voi service:

	kubectl get pod -o wide

De kiem tra cac id va end point cua cac service phai dam bao chu co du moi hoat dong duoc 

	 kubectl describe service mongo-service ( kiem tra o service va doi chieu voi pod cua deployments)
	 kubectl get pod mongo-deployment-59b55c7585-bqzpz -o wide ( vi du cu the )
	 -- khi debug chu y log trong k8s 

Doi voi viec call API noi bo thi su dung url 

	http://  (service name)shoppingapi-service: (port)8000

Xoa resrc

	kubectl delete deployment ocelotapigw-deployment
	kubectl delete service ocelotapigw-service

cach config noi bo cac service call nhau thi bang ten http service + port